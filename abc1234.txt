import java.util.Scanner;

public class MagicSquare {

	public static int[][] generateSquare(int n) {
		int[][] square = new int[n][n];

		int i = 0;
		int j = n / 2;

		for (int x = 1; x <= (n * n); x++) {
			square[i][j] = x;

			int y = i - 1 < 0 ? (n - 1) : i - 1;
			int z = j + 1 > (n - 1) ? 0 : j + 1;

			if (square[y][z] != 0) {
				i = i + 1 > (n - 1) ? 0 : i + 1;
			} else {
				i = y;
				j = z;
			}

		}

		return square;
	}

	public static void main(String[] args) {

		Scanner input = new Scanner(System.in);

		System.out.print("Please enter an odd integer:  ");
		int n = input.nextInt();

		if (n % 2 == 0) {
			System.out.println("Number must be odd!");
			return;
		}

		int[][] square = generateSquare(n);

		for (int[] row : square) {
			for (int i = 0; i < row.length; i++) {
				System.out.print(row[i] + "\t");
			}
			System.out.println();
		}

	}

}

import java.util.Arrays;


public class Sudoku {
	int[][] solution =          
			{{4,2,9,8,1,3,5,6,7}, 
            {5,1,6,4,7,2,9,3,8},
            {7,8,3,6,5,9,2,4,1},
            {6,7,2,1,3,4,8,5,9},
            {3,9,5,2,8,6,1,7,4},
            {8,4,1,7,9,5,6,2,3},
            {1,5,8,3,6,7,4,9,2},
            {9,3,4,5,2,8,7,1,6},
            {2,6,7,9,4,1,3,8,5}};



	private boolean checkSudokuStatus(int[][] grid) {
	    for (int i = 0; i < 9; i++) {

	    	int[] row = new int[9];
	        int[] col = new int[9];
	        int[] square = new int[9];
	        
	        for (int x = 0; x < 9; x ++) {
	        	row[x] = grid[i][x];
	            col[x] = grid[x][i];
	            square[x] = grid[(i / 3) * 3 + x / 3][i * 3 % 9 + x % 3];
	        }
	        if (!(checkArray(row) && checkArray(col) && checkArray(square)))
	            return false;
	    }
	    return true;
	}

	private boolean checkArray(int[] array) {
		Arrays.sort(array);
		for (int i = 0; i < array.length; i++) {
			if (array[i] != i+1) {
				return false;
			}
		}
		return true;
	}
	
	public static void main(String[] args) {
		Sudoku s = new Sudoku();
		
		System.out.println((s.checkSudokuStatus(s.solution)));
	}

}

